//
//  QRViewFactory.swift
//
//  Created by Oscar Giraldo [Deadlock-oscargiraldo000] on 21/12/18.
//  update 28/02/25 by [Deadlock-oscargiraldo000]
//

import Foundation
import Flutter

/// Clase que implementa `FlutterPlatformViewFactory` para crear instancias de `QRView`.
public class QRViewFactory: NSObject, FlutterPlatformViewFactory {
    
    // MARK: - Properties
    
    /// Registrar para obtener el messenger y otros recursos de Flutter.
    private weak var registrar: FlutterPluginRegistrar?
    
    // MARK: - Initializer
    
    /// Inicializador que recibe el `FlutterPluginRegistrar`.
    /// - Parameter registrar: El `FlutterPluginRegistrar` que proporciona acceso a los recursos de Flutter.
    public init(withRegistrar registrar: FlutterPluginRegistrar) {
        super.init()
        self.registrar = registrar
    }
    
    // MARK: - FlutterPlatformViewFactory Protocol
    
    /// Método requerido para crear una instancia de `FlutterPlatformView`.
    /// - Parameters:
    ///   - frame: El frame (tamaño y posición) de la vista.
    ///   - viewId: Un identificador único para la vista.
    ///   - args: Argumentos adicionales pasados desde Flutter (opcional).
    /// - Returns: Una instancia de `FlutterPlatformView`.
    public func create(
        withFrame frame: CGRect,
        viewIdentifier viewId: Int64,
        arguments args: Any?
    ) -> FlutterPlatformView {
        // Convierte los argumentos a un diccionario de tipo [String: Double].
        let params = args as? [String: Double] ?? [:]
        
        // Asegúrate de que el registrar no sea nil.
        guard let registrar = registrar else {
            fatalError("El registrar no puede ser nil al crear una instancia de QRView.")
        }
        
        // Crea y retorna una instancia de `QRView`.
        return QRView(
            withFrame: frame,
            withRegistrar: registrar,
            withId: viewId,
            params: params
        )
    }
    
    /// Método requerido para definir el codec de mensajes utilizado para pasar argumentos.
    /// - Returns: Un codec para serializar/deserializar mensajes.
    public func createArgsCodec() -> FlutterMessageCodec & NSObjectProtocol {
        return FlutterStandardMessageCodec(readerWriter: FlutterStandardReaderWriter())
    }
}